// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PredictScore.Repository;

#nullable disable

namespace PredictScore.Repository.Migrations
{
    [DbContext(typeof(PredictScoreDbContext))]
    partial class PredictScoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroupPlayer", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("PlayersId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("GroupPlayer");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayScore")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeScore")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("RoundId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.PredictionMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PredictionMatches");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.PredictionSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PredictionSeasonRulesId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("PredictionSeasons");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.PredictionSeasonRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FullScorePoints")
                        .HasColumnType("int");

                    b.Property<int>("HalfScorePoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PredictionSeasonId")
                        .HasColumnType("int");

                    b.Property<int>("ScoreDifferencePoint")
                        .HasColumnType("int");

                    b.Property<int>("WinnerScorePoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PredictionSeasonId")
                        .IsUnique();

                    b.ToTable("PredictionSeasonRules");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(2974),
                            Description = "American football for those not familiar with..",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3023),
                            Name = "NFL"
                        });
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SportId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Acronym = "ARZ",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3488),
                            FullName = "Arizona Cardinals",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3490),
                            ShortName = "Cardinals",
                            SportId = 1
                        },
                        new
                        {
                            Id = 2,
                            Acronym = "ATL",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3552),
                            FullName = "Atlanta Falcons",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3553),
                            ShortName = "Falcons",
                            SportId = 1
                        },
                        new
                        {
                            Id = 3,
                            Acronym = "BLT",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3572),
                            FullName = "Baltimore Ravens",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3573),
                            ShortName = "Ravens",
                            SportId = 1
                        },
                        new
                        {
                            Id = 4,
                            Acronym = "BUF",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3589),
                            FullName = "Buffalo Bills",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3590),
                            ShortName = "Bills",
                            SportId = 1
                        },
                        new
                        {
                            Id = 5,
                            Acronym = "CAR",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3605),
                            FullName = "Carolina Panthers",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3606),
                            ShortName = "Panthers",
                            SportId = 1
                        },
                        new
                        {
                            Id = 6,
                            Acronym = "CHI",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3624),
                            FullName = "Chicago Bears",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3625),
                            ShortName = "Bears",
                            SportId = 1
                        },
                        new
                        {
                            Id = 7,
                            Acronym = "CIN",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3639),
                            FullName = "Cincinatti Bengals",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3640),
                            ShortName = "Bengals",
                            SportId = 1
                        },
                        new
                        {
                            Id = 8,
                            Acronym = "CLV",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3654),
                            FullName = "Cleveland Browns",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3656),
                            ShortName = "Browns",
                            SportId = 1
                        },
                        new
                        {
                            Id = 9,
                            Acronym = "DAL",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3670),
                            FullName = "Dallas Cowboys",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3671),
                            ShortName = "Cowboys",
                            SportId = 1
                        },
                        new
                        {
                            Id = 10,
                            Acronym = "DEN",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3685),
                            FullName = "Denver Broncos",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3686),
                            ShortName = "Broncos",
                            SportId = 1
                        },
                        new
                        {
                            Id = 11,
                            Acronym = "DET",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3700),
                            FullName = "Detroit Lions",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3701),
                            ShortName = "Lions",
                            SportId = 1
                        },
                        new
                        {
                            Id = 12,
                            Acronym = "GB",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3715),
                            FullName = "Green Bay Packers",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3716),
                            ShortName = "Packers",
                            SportId = 1
                        },
                        new
                        {
                            Id = 13,
                            Acronym = "HST",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3731),
                            FullName = "Houston Texas",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3732),
                            ShortName = "Texas",
                            SportId = 1
                        },
                        new
                        {
                            Id = 14,
                            Acronym = "IND",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3747),
                            FullName = "Indianapolis Colts",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3748),
                            ShortName = "Colts",
                            SportId = 1
                        },
                        new
                        {
                            Id = 15,
                            Acronym = "JAX",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3762),
                            FullName = "Jacksonville Jaguars",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3763),
                            ShortName = "Jaguars",
                            SportId = 1
                        },
                        new
                        {
                            Id = 16,
                            Acronym = "KC",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3776),
                            FullName = "Kansas City Chiefs",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3777),
                            ShortName = "Chiefs",
                            SportId = 1
                        },
                        new
                        {
                            Id = 17,
                            Acronym = "LV",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3792),
                            FullName = "Las Vegas Raiders",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3793),
                            ShortName = "Raiders",
                            SportId = 1
                        },
                        new
                        {
                            Id = 18,
                            Acronym = "LAC",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3807),
                            FullName = "Los Angeles Chargers",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3808),
                            ShortName = "Chargers",
                            SportId = 1
                        },
                        new
                        {
                            Id = 19,
                            Acronym = "LA",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3822),
                            FullName = "Los Angeles Rams",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3823),
                            ShortName = "Rams",
                            SportId = 1
                        },
                        new
                        {
                            Id = 20,
                            Acronym = "MIA",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3836),
                            FullName = "Miami Dolphins",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3837),
                            ShortName = "Dolphins",
                            SportId = 1
                        },
                        new
                        {
                            Id = 21,
                            Acronym = "MIN",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3851),
                            FullName = "Minnesota Vikings",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3852),
                            ShortName = "Vikings",
                            SportId = 1
                        },
                        new
                        {
                            Id = 22,
                            Acronym = "NE",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3866),
                            FullName = "New England Patriots",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3867),
                            ShortName = "Patriots",
                            SportId = 1
                        },
                        new
                        {
                            Id = 23,
                            Acronym = "NO",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3880),
                            FullName = "New Orleans Saints",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3881),
                            ShortName = "Saints",
                            SportId = 1
                        },
                        new
                        {
                            Id = 24,
                            Acronym = "NYG",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3894),
                            FullName = "New York Giants",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3895),
                            ShortName = "Giants",
                            SportId = 1
                        },
                        new
                        {
                            Id = 25,
                            Acronym = "NYJ",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3909),
                            FullName = "New York Jets",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3910),
                            ShortName = "Jets",
                            SportId = 1
                        },
                        new
                        {
                            Id = 26,
                            Acronym = "PHI",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3924),
                            FullName = "Philadelphia Eagles",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3925),
                            ShortName = "Eagles",
                            SportId = 1
                        },
                        new
                        {
                            Id = 27,
                            Acronym = "PIT",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3938),
                            FullName = "Pittsburgh Steelers",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3939),
                            ShortName = "Steelers",
                            SportId = 1
                        },
                        new
                        {
                            Id = 28,
                            Acronym = "SF",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3953),
                            FullName = "San Francisco 49ers",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3954),
                            ShortName = "49ers",
                            SportId = 1
                        },
                        new
                        {
                            Id = 29,
                            Acronym = "SEA",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3968),
                            FullName = "Seattle Seahawks",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3969),
                            ShortName = "Seahawks",
                            SportId = 1
                        },
                        new
                        {
                            Id = 30,
                            Acronym = "TB",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3982),
                            FullName = "Tampa Bay Buccaneers",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3983),
                            ShortName = "Buccaneers",
                            SportId = 1
                        },
                        new
                        {
                            Id = 31,
                            Acronym = "TEN",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3996),
                            FullName = "Tennessee Titans",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(3997),
                            ShortName = "Titans",
                            SportId = 1
                        },
                        new
                        {
                            Id = 32,
                            Acronym = "WAS",
                            CreationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(4011),
                            FullName = "Washington Commanders",
                            LastModificationDateTime = new DateTime(2023, 7, 11, 16, 42, 26, 413, DateTimeKind.Local).AddTicks(4012),
                            ShortName = "Commanders",
                            SportId = 1
                        });
                });

            modelBuilder.Entity("GroupPlayer", b =>
                {
                    b.HasOne("PredictScore.Core.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PredictScore.Core.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Competition", b =>
                {
                    b.HasOne("PredictScore.Core.Entities.Sport", "Sport")
                        .WithMany("Competitions")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Group", b =>
                {
                    b.HasOne("PredictScore.Core.Entities.Player", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Match", b =>
                {
                    b.HasOne("PredictScore.Core.Entities.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PredictScore.Core.Entities.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PredictScore.Core.Entities.Round", "Round")
                        .WithMany("Matches")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.PredictionMatch", b =>
                {
                    b.HasOne("PredictScore.Core.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PredictScore.Core.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.PredictionSeason", b =>
                {
                    b.HasOne("PredictScore.Core.Entities.Group", "Group")
                        .WithMany("Seasons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PredictScore.Core.Entities.Player", null)
                        .WithMany("PredictionSeasons")
                        .HasForeignKey("PlayerId");

                    b.HasOne("PredictScore.Core.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.PredictionSeasonRules", b =>
                {
                    b.HasOne("PredictScore.Core.Entities.PredictionSeason", "PredictionSeason")
                        .WithOne("PredictionSeasonRules")
                        .HasForeignKey("PredictScore.Core.Entities.PredictionSeasonRules", "PredictionSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PredictionSeason");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Round", b =>
                {
                    b.HasOne("PredictScore.Core.Entities.Season", "Season")
                        .WithMany("Rounds")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Season", b =>
                {
                    b.HasOne("PredictScore.Core.Entities.Competition", "Competition")
                        .WithMany("Seasons")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Team", b =>
                {
                    b.HasOne("PredictScore.Core.Entities.Season", null)
                        .WithMany("Teams")
                        .HasForeignKey("SeasonId");

                    b.HasOne("PredictScore.Core.Entities.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Competition", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Group", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Player", b =>
                {
                    b.Navigation("PredictionSeasons");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.PredictionSeason", b =>
                {
                    b.Navigation("PredictionSeasonRules")
                        .IsRequired();
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Round", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Season", b =>
                {
                    b.Navigation("Rounds");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("PredictScore.Core.Entities.Sport", b =>
                {
                    b.Navigation("Competitions");
                });
#pragma warning restore 612, 618
        }
    }
}
